// This file is taken from Halftone project:
// https://github.com/tfuxu/Halftone/blob/main/data/ui/dither_page.blp
using Gtk 4.0;
using Adw 1;

template $HalftoneDitherPage: Adw.BreakpointBin {
  width-request: 360;
  height-request: 294;

  child: Adw.OverlaySplitView split_view {
    sidebar-position: start;
    show-sidebar: true;
    min-sidebar-width: 360;

    sidebar: Adw.ToolbarView sidebar_view {
      top-bar-style: flat;

      [top]
      Adw.HeaderBar {
        centering-policy: strict;

        [start]
        Gtk.Button {
          tooltip-text: _("Open Image (Ctrl+O)");
          icon-name: "arrow-into-box-symbolic";
          action-name: "app.open-image";
        }

        [end]
        Gtk.MenuButton sidebar_main_menu {
          tooltip-text: _("Main Menu");
          icon-name: "open-menu-symbolic";
          menu-model: main_menu;
          primary: bind split_view.show-sidebar;
        }
      }
    };

    content: Adw.ToolbarView dither_view {
      extend-content-to-top-edge: true;

      [top]
      Gtk.Stack dither_header_stack {
        Gtk.StackPage {
          name: "desktop";

          child: Adw.HeaderBar {
            show-title: false;

            styles [
              "desktop",
            ]
          };
        }

        Gtk.StackPage {
          name: "mobile";

          child: Adw.HeaderBar {
            [start]
            Gtk.Button content_open_button {
              tooltip-text: _("Open Image (Ctrl+O)");
              icon-name: "arrow-into-box-symbolic";
              action-name: "app.open-image";
            }

            [end]
            Gtk.MenuButton content_main_menu {
              tooltip-text: _("Main Menu");
              icon-name: "open-menu-symbolic";
              menu-model: main_menu;
            }
          };
        }

        visible-child-name: "desktop";
      }

      content: Gtk.Box image_box {
        orientation: vertical;
        homogeneous: true;
        vexpand: true;
        hexpand: true;

        Gtk.Overlay {
          child: Gtk.Overlay {
            child: Gtk.ScrolledWindow preview_scroll_window {
              vexpand: true;
              hexpand: true;

              Gtk.Picture image_dithered {
                content-fit: cover;
                can-shrink: false;
                halign: center;
                valign: center;
              }
            };

            [overlay]
            Gtk.Button toggle_sheet_button {
              halign: start;
              valign: end;
              icon-name: "sidebar-show-left-symbolic";
              action-name: "app.toggle-sheet";
              tooltip-text: _("Toggle Sidebar");

              styles [
                "osd",
                "circular",
                "custom-on-image",
              ]
            }

            [overlay]
            Gtk.Button {
              halign: end;
              valign: end;
              icon-name: "adw-external-link-symbolic";
              tooltip-text: _("Open in External Image Viewer");
              action-name: "app.show-preview-image";

              styles [
                "osd",
                "circular",
                "custom-on-image",
              ]
            }
          };

          [overlay]
          Gtk.Box preview_loading_overlay {
            vexpand: true;
            hexpand: true;
            orientation: vertical;
            visible: false;

            Gtk.Box {
              vexpand: true;
              hexpand: true;
              valign: center;
              halign: center;
              spacing: 10;
              orientation: vertical;

              Adw.Spinner {
                height-request: 64;
                width-request: 64;
              }

              Gtk.Label {
                label: _("Dithering your image…");
              }
            }

            styles [
              "osd",
            ]
          }
        }

        // TODO: Add SpringAnimation to animate sheet hiding
        // TODO: Add scroll and touch drag gestures for triggering bottom sheet hide animation
        Gtk.Box bottom_sheet_box {
          orientation: vertical;
          valign: end;
          visible: false;

          Gtk.Separator {
            orientation: horizontal;
          }

          Adw.Bin bottom_sheet {}
        }
      };
    };
  };

  Adw.Breakpoint mobile_breakpoint {
    condition ("max-width: 640px")

    setters {
      sidebar_main_menu.primary: false;
      content_main_menu.primary: true;
      split_view.collapsed: true;
      dither_view.extend-content-to-top-edge: false;
      dither_view.top-bar-style: raised_border;
      dither_header_stack.visible-child-name: "mobile";
      toggle_sheet_button.icon-name: "sheet-show-bottom-symbolic";
      toggle_sheet_button.tooltip-text: _("Toggle Bottom Sheet");
      bottom_sheet_box.visible: true;
    }
  }
}

Adw.Bin image_prefs_bin {
  child: Adw.ToolbarView {
    content: Adw.PreferencesPage {
      Adw.PreferencesGroup options_group {
        title: _("Options");

        [header-suffix]
        Gtk.MenuButton options_information_button {
          valign: center;
          popover: options_information_popover;
          icon-name: "help-about-symbolic";
          tooltip-text: _("Explanation");

          styles [
            "flat",
          ]
        }

        Adw.ComboRow dither_algorithms_combo {
          title: _("Dither Algorithm");

          model: Gtk.StringList algorithms_stringlist {};
        }

        // Adw.ComboRow color_palette {
        //  title: _("Color Palette");
        //  model: Gtk.StringList color_palettes {};
        // }
        Adw.SpinRow color_amount_row {
          title: _("Color Amount");

          adjustment: Gtk.Adjustment color_amount_adjustment {
            lower: 1;
            upper: 256;
            step-increment: 1;
            page-increment: 5;
          };

          output => $on_color_amount_changed();
        }

        Adw.ComboRow export_format_combo {
          title: _("Convert To");

          model: Gtk.StringList image_formats_stringlist {};
        }
      }

      Adw.PreferencesGroup adjustments_group {
        title: _("Adjustments");

        Adw.SpinRow brightness_row {
          title: _("Brightness");
          subtitle: _("Range -100 to 100");

          adjustment: Gtk.Adjustment brightness_adjustment {
            lower: -100;
            upper: 100;
            step-increment: 1;
            page-increment: 5;
          };

          output => $on_brightness_changed();
        }

        Adw.SpinRow contrast_row {
          title: _("Contrast");
          subtitle: _("Range -100 to 100");

          adjustment: Gtk.Adjustment contrast_adjustment {
            lower: -100;
            upper: 100;
            step-increment: 1;
            page-increment: 5;
          };

          output => $on_contrast_changed();
        }
      }

      Adw.PreferencesGroup image_size_group {
        title: _("Image Size");

        Adw.SpinRow image_width_row {
          title: _("Width");
          subtitle: _("In pixels");

          adjustment: Gtk.Adjustment image_width_adjustment {
            lower: 1;
            upper: 8192;
            step-increment: 1;
            page-increment: 5;
          };

          output => $on_image_width_changed();
        }

        // TODO: Remove option completely if there's no user feedback to bring it back
        Adw.SwitchRow aspect_ratio_toggle {
          visible: false;
          title: _("Keep aspect ratio");

          [suffix]
          Gtk.MenuButton aspect_ratio_button {
            valign: center;
            popover: aspect_ratio_popover;
            icon-name: "help-about-symbolic";
            tooltip-text: _("Explanation");

            styles [
              "flat",
            ]
          }
        }

        // TODO: Remove option completely if there's no user feedback to bring it back
        Adw.SpinRow image_height_row {
          visible: false;
          title: _("Height");
          subtitle: _("In pixels");

          adjustment: Gtk.Adjustment image_height_adjustment {
            lower: 1;
            upper: 8192;
            step-increment: 1;
            page-increment: 5;
          };

          output => $on_image_height_changed();
        }
      }
    };

    [bottom]
    Gtk.Box {
      halign: center;

      Gtk.Button save_image_button {
        label: _("Save Image");
        action-name: "app.save-image";

        styles [
          "pill",
          "suggested-action",
        ]
      }

      styles [
        "sheet-toolbar",
      ]
    }
  };
}

Gtk.Popover options_information_popover {
  Gtk.Label {
    margin-top: 6;
    margin-bottom: 6;
    margin-start: 6;
    margin-end: 6;
    wrap: true;
    justify: center;
    max-width-chars: 30;
    use-markup: true;
    label: _("To learn more about individual options, go to the <a href=\"https://github.com/tfuxu/Halftone/wiki/Options\">wiki page</a>.");
  }
}

Gtk.Popover aspect_ratio_popover {
  Gtk.Label {
    margin-top: 6;
    margin-bottom: 6;
    margin-start: 6;
    margin-end: 6;
    wrap: true;
    justify: center;
    max-width-chars: 30;
    label: _("This option allows you to preserve original aspect ratio when resizing an image.");
  }
}

Gtk.FileDialog save_image_dialog {
  title: _("Save an Image in…");
  modal: true;
}

Gtk.FileFilter all_filter {
  name: _("All files");

  mime-types [
    "application/octet-stream",
  ]
}

menu main_menu {
  section {
    /*item {
      label: _("Preferences");
      action: "app.preferences";
    }*/
    item {
      label: _("Keyboard Shortcuts");
      action: "win.show-help-overlay";
    }

    item {
      label: _("About Halftone");
      action: "app.about";
    }
  }
}
